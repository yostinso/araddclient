#!/bin/bash

. ./araddclient

v6_re='^(([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}|(([0-9a-f]{1,4}:)+)((:[0-9a-f]{1,4})+))$'

parse_args()
{
  while (( "$#" )); do
    case $1 in
      -s|--slow-tests)
        run_slow_tests=1
        shift
        ;;
      -t|--test-only)
        test_only=$2
        shift 2
        ;;
      *)
        echo "Invalid option $1"
        exit
        ;;
    esac
  done
}

printout()
{
  local test="$1"
  test=${test:4}
  local result="$2"
  local pad="$test                                  "
  echo "${pad:0:-${#test}} $result"
}

ok_stub_method()
{
  echo "stubbed $@"
  return 99
}

empty_stub_method()
{
  return 99
}

ara_test_help()
{
  print_help 2>&1 | grep '^Usage' || return 2
  return 0
}

ara_test_minimal_conf()
{
  local t=$(mktemp)
  local res
  local conf="
server=AA
login=BB
password=CC
zone=DD
hosts=\"EE FF\"
  "
  for var in server login password zone hosts; do
    echo "$conf" | grep -v "^$var=" > "$t"
    load_conf "$t" 2>&1 | grep "Missing.*: $var"
    res=$?
    if [[ $res -ne 0 ]]; then
      lasterr="Didn't catch missing config $var"
      return -1
    fi
  done

  echo "$conf" > "$t"
  load_conf "$t"
  res=$?
  rm "$t"
  [[ $res -eq 0 ]] || { lasterr="Failed to parse config" && return 1; }
  [[ "$server"          == "AA" ]] || { lasterr="Failed to parse server" && return 1; }
  [[ "$login"           == "BB" ]] || { lasterr="Failed to parse login" && return 1; }
  [[ "$password"        == "CC" ]] || { lasterr="Failed to parse password" && return 1; }
  [[ "$zone"            == "DD" ]] || { lasterr="Failed to parse zone" && return 1; }
  [[ "$hosts"           == "EE FF" ]] || { lasterr="Failed to parse hosts" && return 1; }
  return 0
}

ara_test_v4_conf()
{
  local res
  local conf="
  server=AA; login=BB; password=CC; zone=DD; hosts=\"EE FF\"
  "
  local t=$(mktemp)
  echo "$conf" > "$t"
  load_conf "$t"
  rm "$t"
  [[ "$use_v4"    == "yes" ]] ||        { lasterr="Invalid default use_v4" && return 1; }
  [[ "$v4_method" == "icanhazip" ]] ||  { lasterr="Invalid default v4_method" && return 1; }

  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "use_v4=no; v4_method=meraki" >> "$t"
  load_conf "$t"
  rm "$t"
  [[ "$use_v4"    == "no" ]] ||     { lasterr="Failed to override use_v4" && return 1; }
  [[ "$v4_method" == "meraki" ]] || { lasterr="Failed to override v4_method" && return 1; }

  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "v4_method=wut" >> "$t"
  load_conf "$t" 2>&1 | grep "Invalid v4_method" >/dev/null
  res=$?
  rm "$t"
  [[ $res -ne 0 ]] && { lasterr="Allowed invalid v4_method" && return 1; }

  return 0
}

ara_test_v6_conf()
{
  local res
  local conf="
  server=AA; login=BB; password=CC; zone=DD; hosts=\"EE FF\"
  "
  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "v6_if=eth0" >> "$t"
  load_conf "$t"
  rm "$t"
  [[ "$use_v6"    != "yes" ]] ||     { lasterr="Invalid default use_v6" && return 1; }
  [[ "$v6_method" == "ifaddr" ]] ||  { lasterr="Invalid default v6_method" && return 1; }
  [[ "$v6_if" == "eth0" ]] ||        { lasterr="Failed to set v6_if" && return 1; }

  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "use_v6=yes; v6_method=icanhazip" >> "$t"
  load_conf "$t"
  rm "$t"
  [[ "$use_v6"    == "yes" ]] ||       { lasterr="Failed to override use_v6" && return 1; }
  [[ "$v6_method" == "icanhazip" ]] || { lasterr="Failed to override v6_method" && return 1; }

  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "use_v6=yes; v6_method=wut" >> "$t"
  load_conf "$t" 2>&1 | grep "Invalid v6_method" >/dev/null
  res=$?
  rm "$t"
  [[ $res -ne 0 ]] && { lasterr="Allowed invalid v6_method" && return 1; }

  local t=$(mktemp)
  echo "$conf" > "$t"
  echo "use_v6=yes; v6_method=ifaddr" >> "$t"

  load_conf "$t" 2>&1 | grep "use_v6.*requires v6_if"
  res=$?
  rm "$t"
  [[ $res -ne 0 ]] && { lasterr="Allowed v6_method=ifaddr without v6_if defined" && return 1; }

  return 0
}

ara_slow_test_icanhazipv4()
{
  local ip=$(icanhazip 4)
  echo "$ip" | grep -P '^(\d+\.){3}\d+$' || {
    lasterr="Didn't get an IPv4 address with icanhazip. Got $ip" && return 1;
  }
  return 0
}

ara_slow_test_icanhazipv6()
{
  local ip=$(icanhazip 6)
  echo "$ip" | grep -P "$v6_re" || {
    lasterr="Didn't get an IPv4 address with icanhazip. Got $ip" && return 1;
  }
  return 0
}

ara_slow_test_meraki()
{
  local ip=$(meraki 4)
  echo "$ip" | grep -P '^(\d+\.){3}\d+$' || {
    lasterr="Didn't get an IPv4 address with meraki. Got $ip" && return 1;
  }
  return 0
}

ara_test_ifaddr()
{
  v6_if="br0"
  local ip=$(ifaddr)
  echo "$ip" | grep -P "$v6_re" || {
    lasterr="Didn't get an IPv6 address with ifaddr. Got $ip" && return 1;
  }
  return 0
}

ara_test_get_ipv4()
{
  v4_method=ok_stub_method
  local val=$(get_ipv4)
  [[ "$val" == "stubbed 4" ]] || {
    lasterr="Failed to call v4_method in get_ipv4 and return the result" &&
    return 1;
  }

  v4_method=empty_stub_method
  val=$(get_ipv4)
  local res=$?
  
  [[ -z "$val" && $res -eq 1 ]] || {
    lasterr="Got an unexpected response for a failed get_ipv4: $val, $res" &&
    return 1;
  }
}

ara_test_get_ipv6()
{
  v6_method=ok_stub_method
  local val=$(get_ipv6)
  [[ "$val" == "stubbed 6" ]] || {
    lasterr="Failed to call v6_method in get_ipv6 and return the result" &&
    return 1;
  }

  v6_method=empty_stub_method
  val=$(get_ipv6)
  local res=$?
  
  [[ -z "$val" && $res -eq 1 ]] || {
    lasterr="Got an unexpected response for a failed get_ipv6: $val, $res" &&
    return 1;
  }
}

ara_test_call_api()
{
  login=AA
  password=BB
  curl() { echo "$@"; }
  local args=$(call_api "suffix" "POST" "Some data")
  unset curl

  # Note: quotes aren't captured because that's annoying in bash :(
  [[ "$args" =~ "-X POST" ]] || { lasterr="Failed to set method"; return 1; }
  [[ "$args" =~ "-H X-Auth-Email: AA" ]] || { lasterr="Failed to set username"; return 1; }
  [[ "$args" =~ "-H X-Auth-Key: BB" ]] || { lasterr="Failed to set password"; return 1; }
  [[ "$args" =~ "-H Content-Type: application/json" ]] || { lasterr="Failed to set Content-Type"; return 1; }
  [[ "$args" =~ "--data Some data" ]] || { lasterr="Failed to set data"; return 1; }
}

ara_test_touch_host()
{
  state_dir=$(mktemp -d)
  touch_host "my.host" "AAAA" "address"
  local content=$(cat "$state_dir/my.host_AAAA.last" 2>/dev/null || echo "No state file created")
  rm -r "$state_dir"
  unset state_dir
  [[ "$content" == "address" ]] || {
    lasterr="Bad state file content: $content" &&
    return 1;
  }
}

ara_test_should_update_no_file()
{
  state_dir=$(mktemp -d)
  verbose=1
  local out
  out=$(should_update "my.host" "AAAA" "address" 2>&1)
  local res=$?
  rm -r "$state_dir"
  unset state_dir verbose

  [[ "$out" =~ "my.host AAAA is "([[:digit:]]+)" seconds old" ]] || {  lasterr="Failed to log age"; return 1; }
  local age="${BASH_REMATCH[1]}"
  [[ $age -gt 1000 ]] || { lasterr="Got an unexpectedly young age"; return 1; }
  [[ $res -eq 0 ]] || { lasterr="Didn't get expected true response"; return 1; }
}

ara_test_should_update_young_file()
{
  state_dir=$(mktemp -d)
  touch_host "my.host" "AAAA" "address"
  verbose=1
  local out
  local res=0
  out=$(should_update "my.host" "AAAA" "address" 2>&1)
  res=$?
  rm -r "$state_dir"
  unset state_dir verbose

  [[ "$out" =~ "my.host AAAA is "([[:digit:]]+)" seconds old" ]] || { lasterr="Failed to log age"; return 1; }
  local age="${BASH_REMATCH[1]}"
  [[ $age -lt 10 ]] || { lasterr="Got an unexpectedly old age"; return 1; }
  [[ $res -ne 0 ]] || { lasterr="Didn't get expected false response"; return 1; }
}

ara_test_should_update_old_file()
{
  state_dir=$(mktemp -d)
  touch_host "my.host" "AAAA" "address"
  touch -d "2000-01-01" "${state_dir}/my.host_AAAA.last"
  verbose=1
  local out
  local res=0
  out=$(should_update "my.host" "AAAA" "address" 2>&1)
  res=$?
  rm -r "$state_dir"
  unset state_dir verbose

  [[ "$out" =~ "my.host AAAA is "([[:digit:]]+)" seconds old" ]] || { lasterr="Failed to log age"; return 1; }
  local age="${BASH_REMATCH[1]}"
  [[ $age -gt 1000 ]] || { lasterr="Got an unexpectedly young age"; return 1; }
  [[ $res -ne 0 ]] || { lasterr="Didn't get expected false response"; return 1; }
}

ara_test_should_update_new_address()
{
  state_dir=$(mktemp -d)
  touch_host "my.host" "AAAA" "OTHER ADDRESS"
  touch -d "2000-01-01" "${state_dir}/my.host_AAAA.last"
  verbose=1
  local res=0
  out=$(should_update "my.host" "AAAA" "address" 2>&1)
  res=$?
  rm -r "$state_dir"
  unset state_dir verbose

  [[ "$out" =~ "my.host AAAA is "([[:digit:]]+)" seconds old" ]] || {  lasterr="Failed to log age"; return 1; }
  local age="${BASH_REMATCH[1]}"
  [[ $res -eq 0 ]] || { lasterr="Didn't get expected true response"; return 1; }
}

ara_test_should_update_force()
{
  state_dir=$(mktemp -d)
  force_update=1
  touch_host "my.host" "AAAA" "address"
  verbose=1
  local out
  local res=0
  out=$(should_update "my.host" "AAAA" "address" 2>&1)
  res=$?
  rm -r "$state_dir"
  unset state_dir verbose
  unset force_update

  [[ "$out" =~ "my.host AAAA is "([[:digit:]]+)" seconds old" ]] || { lasterr="Failed to log age"; return 1; }
  local age="${BASH_REMATCH[1]}"
  [[ $age -lt 10 ]] || { lasterr="Got an unexpectedly old age"; return 1; }
  [[ $res -eq 0 ]] || { lasterr="Didn't get expected false response"; return 1; }
}

ara_test_get_record()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    call_api() {
      echo '{ "result": [ { "id": "'"$@"'" } ] }'
    }
    out=$(get_record my.zone AAAA my.host)
    [[ $out == "zones/my.zone/dns_records?type=AAAA&name=my.host" ]] || { echo "Bad URL: $out"; return 1; }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_get_zone()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    call_api() {
      echo '{ "result": [ { "id": "'"$@"'" } ] }'
    }
    out=$(get_zone my.zone)
    [[ $out == "zones?name=my.zone" ]] || { echo "Bad URL: $out"; return 1; }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_update_record()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    should_update() { return 0; }
    get_record() { echo "123"; }
    call_api() { echo '{ "success": true }'; }
    touch_host() { return 0; }
    out=$(update_record my.zone my.host address AAAA 2>&1)

    [[ "$out" =~ "Zone: my.zone"[[:space:]]*"Host: 123"[[:space:]]*"Addr: address" ]] || {
      echo "Didn't update host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_create_missing_record_no_allow_create()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    local allow_create="no"
    should_update() { return 0; }
    get_record() { echo ""; }
    call_api() { echo '{ "success": true }'; }
    touch_host() { return 0; }
    out=$(update_record my.zone my.host address AAAA 2>&1)

    [[ "$out" != "Couldn't find host my.host for zone my.zone" ]] || {
      echo "Didn't update host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_create_missing_record_allow_create()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    local allow_create="yes"
    should_update() { return 0; }
    get_record() { echo ""; }
    call_api() { echo '{ "success": true }'; }
    touch_host() { return 0; }
    out=$(update_record my.zone my.host address AAAA 2>&1)

    [[ "$out" =~ "Zone: my.zone"[[:space:]]*"Host: my.host"[[:space:]]*"Addr: address" ]] || {
      echo "Didn't create host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_create_record()
{
  local res
  local err
  # Subshell trick to avoid overwriting methods
  err=$(
    local api_args
    should_update() { return 0; }
    get_record() { echo ""; }
    call_api() { echo '{ "success": true }'; }
    touch_host() { return 0; }
    out=$(create_record my.zone my.host address AAAA 2>&1)

    [[ "$out" =~ "Zone: my.zone"[[:space:]]*"Host: my.host"[[:space:]]*"Addr: address" ]] || {
      echo "Didn't create host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_set_ipv6_for_hosts()
{
  local res
  local err
  unset ipv4
  unset ipv6
  # Subshell trick to avoid overwriting methods
  err=$(
    zone_id="my.zone"
    update_record() { echo "$@"; }
    out=$(set_ipv6_for_hosts "host1 host2" address 2>&1)

    [[ "$out" =~ "my.zone host1 address AAAA"[[:space:]]"my.zone host2 address AAAA" ]] || {
      echo "Didn't update host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

ara_test_set_ipv4_for_hosts()
{
  local res
  local err
  unset ipv4
  unset ipv6
  # Subshell trick to avoid overwriting methods
  err=$(
    zone_id="my.zone"
    update_record() { echo "$@"; }
    out=$(set_ipv4_for_hosts "host1 host2" address 2>&1)
    [[ "$out" =~ "my.zone host1 address A"[[:space:]]"my.zone host2 address A" ]] || {
      echo "Didn't update host as expected";
      return 1
    }
    return 0
  )
  res=$?
  [[ $res -eq 0 ]] || { lasterr="$err"; return $res; }
}

parse_args "$@"

echo "RUN tests" >&2
tests=$(set | grep '^ara_test_.*()' | awk '{ print $1 }')
slow_tests=$(set | grep '^ara_slow_test_.*()' | awk '{ print $1 }')

if [[ "$run_slow_tests" ]]; then
  tests="$tests $slow_tests"
fi

if [[ "$test_only" ]]; then
  tests=$(echo "$test_only" | sed -e 's/\<test_/ara_test_/g' -e 's/\<slow_test_/ara_slow_test_/g')
fi

for t in $tests; do
  lasterr=""
  $t >/dev/null
  res=$?
  if [[ $res -ne 0 ]]; then
    printout "$t" "FAILED: ${lasterr:-$res}"
  else
    printout "$t" "SUCCESS"
  fi
done
echo "DONE tests" >&2
echo "" >&2
